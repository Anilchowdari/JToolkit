#
# Makefile for com.tandem.ext.enscribe package
# 
# (cross-compiler version)
# 

include ../Defs.gmk.tnsr

OTHER_CLASSES = ../guardian/$(TNSR_DIR)/guardian.jar

##
## CLASSPATH
##
export CLASSPATH
CLASSPATH=./classes\;$(OTHER_CLASSES)\;$(JAVA_HOME)/jre/lib/rt.jar

INCLUDE_DIRS = -I./$(STUBS) -I$(JNI_OSS_INCL)/include -I$(JNI_OSS_INCL)/include/oss \
	-I$(CSRC) -I$(PTHREADS_DIR)

##
## Source and target directories
## 
JAVASRC=src_java
CSRC=src_c
CLASSBIN=classes
STUBS=stubs
OBJ=obj

#Used for debug builds
SUFFIX= _g

##
## Package Name
##
LIB= enscribe
PKGPATH=com/tandem/ext/enscribe

##
## Package Source Files 
##

FILES.java = \
	$(JAVASRC)/$(PKGPATH)/AlternateKeyDescriptor.java \
	$(JAVASRC)/$(PKGPATH)/AlternateKeyAlterAttributes.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeCreationAttributes.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeFile.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeFileAttributes.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeLastCallStatus.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeFileException.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeFileWarning.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeFileSearch.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeKeyPositionOptions.java \
	$(JAVASRC)/$(PKGPATH)/EnscribeOpenOptions.java \
	$(JAVASRC)/$(PKGPATH)/KeySequencedCreationAttributes.java \
	$(JAVASRC)/$(PKGPATH)/ParseDelimitedString.java \
	$(JAVASRC)/$(PKGPATH)/ParseDelimitedStringException.java \
	$(JAVASRC)/$(PKGPATH)/PartitionDescriptor.java \
	$(JAVASRC)/$(PKGPATH)/StructuredCreationAttributes.java \
	$(JAVASRC)/$(PKGPATH)/UnstructuredCreationAttributes.java 


FILES.c = \
	$(CSRC)/enscribejni.c \
	$(CSRC)/jEcmaFuncs.c \
	$(CSRC)/ensfileattr.c 

# List of object files for optimized build
FILES.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)/$(TNSR_DIR)/%.o)
# List of object files for debug build
FILESD.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)$(SUFFIX)/$(TNSR_DIR)/%.o)

FILES.class = $(FILES.java:$(JAVASRC)/%.java=$(CLASSBIN)/%.class)
FILES.class.compile = $(subst /,.,$(FILES.class:$(CLASSBIN)/%.class=%))

##
## Rules
##

# 'all' makes the jar file, regenerates the jni header files and makes the optimized
# and non-optimized library files.  Building javadoc files is not part of this rule.
# Javadoc files are built for the customer using the top-level makefile but developers
# that just want to check that they didn't break javadoc can run "gmake javadoc"
# using this makefile
all	: $(LIB).jar .stubs library

library : $(LIB).lib $(LIB)$(SUFFIX).lib

javadoc : .doc $(FILES.java) $(LIB).jar
	$(JAVADOC) -d doc -use -serialwarn \
	-linkoffline http://download.oracle.com/javase/1.4.2/docs/api . \
	-classpath ./$(LIB).jar:$(CLASSPATH)  \
	-sourcepath ./src_java \
	-protected -header "NonStop(TM) Server for Java(TM) Extensions - Enscribe" \
	com.tandem.ext.enscribe

clean :
	rm -rf .class* .stubs 
	rm -rf .doc doc $(LIB).jar $(TNSR_DIR) 
	rm -rf $(CLASSBIN) $(OBJ)/$(TNSR_DIR) $(OBJ)$(SUFFIX)/$(TNSR_DIR) $(STUBS)

## ------------------------------------------------------
## --- Should be no need to modify from this point on ---
## ------------------------------------------------------
##
## Rules for building package bytecode
## 

.delete.classlist:
	@/bin/rm -f .classes.list

.compile.classlist:
	echo $(CLASSPATH)
	echo $(PWD)
	if [ -s .classes.list ] ; \
	then $(JAVAC) -d $(CLASSBIN) \
	    $(JAVACFLAGS)  \
	    $(shell if [ -s .classes.list ] ; then cat .classes.list; fi ) ; \
	fi

$(CLASSBIN):
	@-mkdir -p $@

$(CLASSBIN)/%.class : $(JAVASRC)/%.java
	@echo $? >>.classes.list

.classes: $(CLASSBIN) .delete.classlist $(FILES.class) .compile.classlist
	@touch .classes

$(LIB).jar: $(CLASSBIN) .classes
	rm -f $(TNSR_DIR)/$(LIB).jar; \
	mkdir -p $(TNSR_DIR)
	cd $(CLASSBIN); \
	$(JAR) cmv0f ../man.txt ../$(TNSR_DIR)/$@ *; \
	cd ..;

.doc:
	@-mkdir -p doc

##
## Rules for building native stubs (JNI style)
## 
## - This will build all *.h (jni) stub files.
##
.stubs: $(FILES.class) 
	echo $(FILES.class)
	$(JAVAH) -jni -d $(STUBS) \
	$(FILES.class.compile)
	@touch .stubs

##
## Rules for building native library with IEEE floating point support  
##

$(OBJ):
	@-mkdir -p $@

$(OBJ)/$(TNSR_DIR): $(OBJ)
	@-mkdir -p $@
	
$(OBJ)$(SUFFIX):
	@-mkdir -p $@

$(OBJ)$(SUFFIX)/$(TNSR_DIR): $(OBJ)$(SUFFIX)
	@-mkdir -p $@
	
$(OBJ)/$(TNSR_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_IEEE) $(INCLUDE_DIRS) \
	-c -o $@ $< 
	
$(OBJ)$(SUFFIX)/$(TNSR_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) $(CC_FLAGS_IEEE) $(INCLUDE_DIRS) \
	-c -o $@ $< 

#Should this rule have .stubs as a dependency?
$(LIB).lib: $(OBJ)/$(TNSR_DIR) $(FILES.o)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_IEEE) $(FILES.o) -o $(TNSR_DIR)/$@
	
#Should this rule have .stubs as a dependency?
$(LIB)$(SUFFIX).lib: $(OBJ)$(SUFFIX)/$(TNSR_DIR) $(FILESD.o)
	$(LD) $(LD_DEBUG_FLAGS) $(LD_FLAGS_IEEE) $(FILESD.o) -o $(TNSR_DIR)/$@

