JRequester/README
-----------------

This directory contains information about the demo testcases for
JRequester.  This file contains instructions for running the 3 demo 
testcases for JRequester.

This directory contains 3 demo testcases, simpletest, cserver and 
transactionexample.

Following are the details to run these testcases
------------------------------------------------

1. simpletest
   This is a simple client-server program. It has 2 java program 
SimpleTestClient.java and SimpleTestServer.java
   SimpleTestClient.java is a client program that demonstrates use of 
stream based API and one of the strategies to cancel an operation
   SimpleTestServer.java is a server program that needs to be started 
as a namedserver.  

To execute the demo:

1. Make a copy of the simpletest directory.
2. cd simpletest/src_java
3. Compile SimpleTestServer.java (javac SimpleTestServer.java).
4. Compile SimpleTestclient.java (javac SimpleTestClient.java).
5. Run the SimpleTestServer process as a named server as follows:
   run -name /G/<process name> java SimpleTestServer
6. Run the SimpleTestClient process as follows:
   java SimpleTestClient <process name>

Output:

SimpleTestServer on receiving the client request, sends the following 
printed message and waits for the next client request when the client 
connection is closed.

	Message from a client [Pack my box with five dozen liquor jugs]
	Replying with the response[Yes. I did pack your box with five 
	dozen liquor jugs]
	

SimpleTestClient prints the following message and exits:

	Sending the message [Pack my box with five dozen liquor jugs] 
	to the server process sserv
	Response from the server [Yes. I did pack your box with five 
	dozen liquor jugs]
	
2. cserver
   This is a simple C server and Java client demo testcase. It consist 
of CTestClient.java, DDLDEF.txt, IO_Input.java, IO_Output.java and 
Server.c files.
   CTestClient.java is a java client program that demonstrates how 
to use JRequester API to communicate with a C/Cobol server, using the 
DDL2Java generated classes.
   DDLDEF.txt is a ddl definition file used by CTestClient.java
   IO_Input.java and IO_Output.java are the classes generated by 
DDL2java using ddl definitions in DDLDEF.txt file.
   Server.c is a sample C server program. This has to be a named 
process

To execute the demo

1. Make a copy of the directory cserver
2. cd cserver/src_c
3. make ( This will compile the C server program ).
4. cd ../src_java
5. javac *.java ( This will compile the Java server program ).
6. Run the C server program as follows:
	cd cserver/src_c
	run -name=/G/<process name> ./server	
7. Run the Java client program as follows:
	cd cserver/src_java
	java CTestClient <process name>
   
Output

Server waits for the client request and prints the following message 
on obtaining the client request
	This is a system message 6
	Input message:James                        ,Bond   
                     	,7007,35,A
	This is a system message 6


CTestClient connects to the server, prints the following message and 
exits
	Server responded with the message:This is just a sample 
server. It does not do any DB operations
	
	
3. transactionexample
This demo testcase is an example of Inter Process communication Transaction
propagation. 

Requirements:

a. This requires the creation of a sql/mx table as follows in a specific
catalog and schema:
Run the mxci and create the table as follows.

If the table/schema/catalog already exists, it could be removed as follows in mxci:
DROP TABLE TRANCAT.TRANSCH.EMP;
DROP SCHEMA TRANCAT.TRANSCH;
DROP CATALOG TRANCAT;

Note that the order should be considered while removing the catalog.

To create table:

CREATE CATALOG TRANCAT;
CREATE SCHEMA TRANCAT.TRANSCH;
CREATE TABLE TRANCAT.TRANSCH.EMP
(
    ID                               INT DEFAULT NULL
  , FNAME                            VARCHAR(50) 
  , LNAME                            VARCHAR(50)
);


Following values should be inserted into the above SQL/MX table

INSERT INTO TRANCAT.TRANSCH.EMP VALUES (1, 'fn1', 'ln1'),(2, 'fn2', 'ln2'), (3, 'fn3', 'ln3');
 
b. JDBC/MX T2 Driver. The environment variable should contain the T2 driver 
jar and  Jtoolkit jar. The environment variable _RLD_LIB_PATH should refer to
T2 driver library location and Jtoolkit library location.

Example:
	CLASSPATH=.:/usr/tandem/javaexth11/lib/tdmext.jar:/usr/tandem/jdbcMx/T1275H50/lib/jdbcMx.jar
	_RLD_LIB_PATH=/usr/tandem/javaexth11/lib:/usr/tandem/jdbcMx/T1275H50/lib

To execute the demo
1. Make a copy of the directory transactionexample
2. cd transactionexample/src_java
3. Compile the java classes ( javac *.java )
4. Start the server as follows:
	run -name=/G/trans java -Djdbcmx.catalog=TRANCAT -Djdbcmx.schema=TRANSCH TransactionServer
5. Start the client as follows:
	java TransactionClient trans

Output:

Server:
Server starts and waits for the client. When the transaction starts, following 
messages are printed.

Current Transaction \EUROPA(1).2.11013393
Current Transaction \EUROPA(1).2.11013394
Current Transaction \EUROPA(1).2.11013395

Client:
When the client program is run, the client sends 3 update requests in a loop 
to the server, each within a TMF transaction and waits for a user input before
committing or rolling back the transaction as follows:

Successfully opened the process trans
Trying to update the first name of id[1] to FN9695
Current Transaction \EUROPA(1).2.11013393
Press "Y" to commit "N" to roll back the transaction \EUROPA(1).2.11013393:y
Committing the Transaction
Trying to update the first name of id[2] to FN3879
Current Transaction \EUROPA(1).2.11013394
Press "Y" to commit "N" to roll back the transaction \EUROPA(1).2.11013394:N
Rolling back the Transaction
Trying to update the first name of id[3] to FN1677
Current Transaction \EUROPA(1).2.11013395
Press "Y" to commit "N" to roll back the transaction \EUROPA(1).2.11013395:Y
Committing the Transaction

To verify the updated contents, start the mxci and run the command as follows:

mxci
>>select * from TRANCAT.TRANSCH.EMP
+>;

ID           FNAME                                               LNAME
-----------  --------------------------------------------------  ---------------
-----------------------------------

          1  FN9695                                              ln1

          2  fn2                                                 ln2

          3  FN1677                                              ln3


--- 3 row(s) selected.
>>


	

                                *  *  *
 You are granted a limited copyright to modify and use this sample
 code for your internal purposes only. THIS SOFTWARE IS PROVIDED "AS-
 IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE OR NONINFRINGEMENT. IN NO EVENT SHALL THE
 HEWLETT-PACKARD COMPANY OR ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE INCURRED BY YOU OR ANY THIRD PARTY IN CONNECTION WITH THE
 USE OF THIS SOFTWARE.                                                         


------------------------------------------------------------------------
Copyright 2011
Hewlett-Packard Development Company, L.P.
------------------------------------------------------------------------

