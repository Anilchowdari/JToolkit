Demos
=================================================================
Sample1.java

Creates a key-sequenced file, writes records to the file, 
positions within the file, and reads records from the file.  
----------------------------------------------------------------
SETUP
================================================================
1. Make a copy of this directory in another directory.  For
   example:
   
   mkdir /home/mydir
   cp -R <this_directory_loc> /home/mydir
   
   where <this_directory_loc> is the location of this directory
   and /home/mydir is the directory you made with the mkdir
   command.

2. Compile the .java file by entering:

   javac Sample1.java

   NOTE: When you execute this demo, you will create two Enscribe files 
   in your default Guardian volume.subvolume.  If you do not want to
   create these files in your default Guardian volume.subvolume,
   edit Sample1.java and change sample and altfile0 in the following
   lines to fully qualified Guardian file names:
   
      	String fileName = new String("sample");
   	String altFileName = new String("altfile0");
   	
   For example, after editing these lines to a use $data02.sample
   as the Guardian volume.subvolume, the lines should look like:
   
   	String fileName = new String("$data02.sample.sample");
   	String altFileName = new String("$data02.sample.altfile0");
   
   You should then complile Sample1 as shown above.

------------------------------------------------------------------
EXECUTION of Sample1
==================================================================

Run Sample1 by typing:

   java Sample1

The output should appear as follows:


>>Created File

>>Attributes of new file:
   File code = 0
   File security = OOOO  //or whatever your default security is
   Primary keyoffset = 0
   Maximum extents = 100
   File is audited = true
   Record length = 56
   File Type = 3
   File is key sequenced = true
   Primary key length is 2
   Alternate Key Attributes:
      Number of alt keys = 1
      Alternate key file name = \NODE.$DATA11.MYSUB.ALTFILE0
      Key Specifier is 17488
      Key Length is 2
      Key offset is 54

>>Opened file.
>>Wrote data to the file

>>Reading records with alternate key value of 06
   03Frank Butera         790000Java HotSpot Group       06
   05Alan Joseph          700000Java HotSpot Group       06  
   06Emile Roth           800000Java HotSpot Group       06

>>Reading same records in reverse direction
   06Emile Roth           800000Java HotSpot Group       06
   05Alan Joseph          700000Java HotSpot Group       06
   03Frank Butera         790000Java HotSpot Group       06  
   
===================================================================


===================================================================
SampleG.java

This demo uses classes generated by ddl2java to read and write to 
a key-sequenced file.

SETUP
------------------------------------------------------------------
1. Edit ddlcemp1, change <dictloc> to a Guardian volume and
   subvolume where you want to create a DDL dictionary.  Specify
   an empty volume and subvolume.  For example, if you want to
   create the DDL dictionary on $data01.sampleg, after you edit
   ddlcemp1, you replace <dictloc> with $data01.sampleg.  Then after
   you edit the file, the first line would look like:
   
   ?dict $data01.sampleg

2. Create a DDL dictionary and a record description by typing:

   gtacl -p ddl < ddlcemp1
   
      
3. Edit fupcemp1. Change <vol>.<subvol> to the Guardian 
   volume.subvolume you used in Step 1.  Change the following lines:

   purge <vol>.<subvol>.cemp1 !
   purge <vol>.<subvol>.cemp10 ! 
   CREATE <vol>.<subvol>.CEMP1
   CREATE <vol>.<subvol>.CEMP10 

4. Create a key-sequenced file by typing:

   gtacl -p fup < fupcemp1
   
      
5. Use ddl2java to generate Input and Output classes by typing:

   ddl2java -i itemcemp1 -dpath /G/<vol>/<subvol> -d cemp_src
   	-p cemp_pkg -c
   	
   where: <vol>/<subvol> is the name of the Guardian
   volume.subvolume you used in step 3 in oss format. For example, if your
   Guardian volume.subvolume is $data01.sampleg, you
   specify it as /G/data01/sampleg in oss format.
   
6. Edit SampleG.java.  Change the following line to fully
   qualify the name of cemp1:
   
   String fileName = new String("cemp1"); 
   
   For example, after editing, this line to specify $data01.sampleg
   as the Guardian volume.subvolume, this line should look like:
   
   String fileName = new String("$data01.sampleg.cemp1"); 
   	
7. Compile the SampleG.java by typing:

   javac SampleG.java
-------------------------------------------------------------------   
  
EXECUTION OF SAMPLEG
-------------------------------------------------------------------

To execute SampleG, type:

   java SampleG

   
The output from the program should appear as follows:

>>Opened file.
>>Wrote all data to the file

>>Closing file
>>Reopening file
>>Reading all records in the file
1, Frank, Smith, A, 1, 1
2, Faye, Brown, B, 1, 1
3, David, Jones, C, 10, 2
4, Alan, Black, D, 11, 4
5, Selva, White, E, 7, 5
6, Uyen, Stevens, F, 10, 2
7, Bobbie, Collins, G, 11, 4
8, Dave, Dowers, H, 1, 1
9, Nayna, Phillips, I, 7, 5
10, Bill, Lane, J, 5, 1
>>Positioning to record with primary key value of 7
>>Reading record with primary key value of 7
7, Bobbie, Collins, G, 11, 4
>>All done                   

                                 *  *  *
 You are granted a limited copyright to modify and use this sample
 code for your internal purposes only. THIS SOFTWARE IS PROVIDED "AS-
 IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE OR NONINFRINGEMENT. IN NO EVENT SHALL THE
 HEWLETT-PACKARD COMPANY OR ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE INCURRED BY YOU OR ANY THIRD PARTY IN CONNECTION WITH THE
 USE OF THIS SOFTWARE.                                                         

