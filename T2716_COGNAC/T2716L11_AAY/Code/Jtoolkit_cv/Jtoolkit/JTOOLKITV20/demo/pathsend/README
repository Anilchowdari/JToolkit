TSMP/README

The demo provided for this API is for reference purposes only. The demo is
intended to illustrate usage of the Pathway Server API in Java.  The demo is
not intended to form the basis of production programs.  The demo does not 
demonstrate the definitive way to write a Pathway server program.  There are
other methods that might be more suitable for your requirements or application.

This is an example of using Compaq NonStop(TM) Server for Java(TM) ... based on
Java(TM) 2 Platform, Standard Edition, SDK 1.4.1 to communicate with a legacy
TS/MP server. This example does the following:

1. Creates a DDL dictionary (if one doesn't already exist).

2. Adds a record and definitions to that dictionary with the following names:

   definition - error-reply
                employee-reply
                employee-add
                employee-request
   record -     employee

2. Creates an audited ENSCRIBE key-sequenced file called employ.

3. Compiles a server that can access the employ file. The server is designed in
   such a way that it can handle both context free as well as context sensitive 
   pathsend calls. In case of context sensitive calls, If it is a new dialog 
   then the server continues the dialog otherwise server ends the dialog.

4. Starts and configures a pathway system under which that server will run.

5. Uses ddl2java to generate .class files that are used for the request sent
   to the legacy server and for the reply received from the legacy server.

6. Compiles a employeeInfo.java. The employeeInfo class contains methods which
   add a set of employees, read the set that were just added, and then delete
   the same employees. You might want to examine this file to see how to use 
   jpathsend context free calls.

7. Compiles a dialogEmployeeInfo.java. The dialogEmployeeInfo class contains  
   methods which add a set of employees, read the set that were just added, and 
   then delete the same employees. You might want to examine this file to see
   how to use jpathsend context sensitive calls. 

Execution Instructions

   NOTE: Make sure you make a copy of this demo directory to a different  
   location before configuring and running it.

1. Edit Makefile and make the necessary changes to all information above the
   line that says "You shouldn't have to edit anything below this line". 
   At a minimum, you must provide values for:

   INSTALLDIR - Specify the absolute path name of this directory.

   G_DICTPATH - this is the volume and subvolume where you want the DDL
                dictionary created (or where one already exists where you 
                want to add the definitions and record described above).

		This must be specified using /G syntax(i.e. /G/vol/subvol ).
		See the Makefile for another example.

   G_PATHWAY_SUBVOL - this is the volume and subvolume where the employ file
                      will be created.  It is also the volume and subvolume
                      where the TS/MP pathctl and pathlog files will be created.

		      Specify the same volume and subvolume as you did for
                      G_DICTPATH only use Guardian syntax (i.e. $vol.subvol).
		      See the Makefile for another example and NOTE that the
                      $ must be escaped as in the Makefile example.

   PATHMON_NAME - this is the name that will be used for the pathmon of the
                  TS/MP system (i.e. $PM).  NOTE: that the $ must be escaped.
                  NOTE also that the name chosen must NOT be the name of any
                  other process running on the system.

2. Execute the Makefile by typing:

   make all

   This will generate the following files:
   
   empddl - is used to add a record and definitions to the dictionary.

   empfup - is used to create an audited ENSCRIBE key-sequenced file.

   editin - edit commands used to create an obey that will be used to 
            start the pathmon.

   pathcnfg - is used to start the pathway. 

3. To run the demo, execute the following steps:

   a. Add a record and definitions to the DDL dictionary

	gtacl -p ddl < empddl

   b. Create an audited ENSCRIBE key-sequenced file called employ
   
        gtacl -p fup < empfup

   c. Compile a server that can access the employ file
   
        /usr/bin/c89 -g -I . -Wextensions -o empsvr emp.c

   d. Start the pathmon

        gtacl -p edit < editin
        gtacl -cv "obey \$<g_pathway_subvol>.jobey"

        where <g_pathway_subvol> is the name you supplied in the Makefile for
        G_PATHWAY_SUBVOL but without the back slash ane the $ signs. 

   e. Configure the TS/MP system 
        
        gtacl -p pathcom \$<pathmon_name> < pathcnfg

        where <pathmon_name> is the name you supplied in the Makefile for
        PATHMON_NAME but without the back slash ane the $ signs.

   f. Run ddl2java to generate .class files

        ddl2java -i itemlist -dpath <g_dictpath> -d employee_src -p
                                                         employee_class -c

        where g_dictpath is the name you supplied in the Makefile for G_DICTPATH
       
        NOTE:  Make sure the path to ddl2java is set in the PATH environment
               variable.

   g. Compile the file employeeInfo.java and dialogEmployeeInfo.java
      Before compiling, if the file tdmext.jar is not placed in the location
      <install-dir>/jre/lib/ext then the environment variable CLASSPATH has
      to be set 
 
      export CLASSPATH=$CLASSPATH:<tdmext_path>/tdmext.jar:.
   
      where <install-dir> is the directory where the NSJ is installed
            <tdmext_path> is the directory where the file tdmext.jar can                    be found.

      javac -d . employeeInfo.java
      javac -d . dialogEmployeeInfo.java

   h. run the application

      (i) Pathsend Context free calls demo

          java employeeInfo -p \$<pathmon_name> -s empsvr

      where <pathmon_name> is the name you supplied in the Makefile for
      PATHMON_NAME but without the back slash and the $ signs.

EXPECTED OUTPUT

Going to add 4 employees
Employee added successfully
Employee added successfully
Employee added successfully
Employee added successfully
Reading employees from the data base
First Name: Anne                
Middle Initial: A
Last Name: Smith                         
Region: 1
Branch: 0
First Name: Mike                
Middle Initial: B
Last Name: Jones                         
Region: 1
Branch: 1
First Name: Steve               
Middle Initial: C
Last Name: Brown                         
Region: 2
Branch: 0
First Name: Frank               
Middle Initial: D
Last Name: Green                         
Region: 3
Branch: 1
Deleting employees from the data base
Deleted employee 0001                                       
Deleted employee 0002                                       
Deleted employee 0003                                       
Deleted employee 0004                                       
Exiting from employeeInfo....


     (ii). Pathsend Context sensitive call demo

           java dialogEmployeeInfo -p \$<pathmon_name> -s empsvr

        where <pathmon_name> is the name you supplied in the Makefile for
        PATHMON_NAME but without the back slash and the $ signs.


EXPECTED OUTPUT

================================================
           Going to add employees
================================================
          *********Pathmon Name : $demo*********
          *********ServerClassName : empsvr*********
          *********Transaction Model Value : 0*********
          *********Dialog's Timeout value : 100*********

         *********Dialog Begin*********
----->Status of the Dialog is Continue
Employee added successfully

         *********Dialog Send*********
----->Dialog has been Ended
Employee added successfully

----->Dialog has been reset ,hence reused

         *********Dialog Begin*********
----->Status of the Dialog is Continue
Employee added successfully

         *********Dialog Send*********
----->Dialog has been Ended
Employee added successfully

----->Dialog has been reset ,hence reused

         *********Dialog Begin*********
----->Dialog has been aborted
----->Transaction Rollbacked
==============================================================
            Reading employees from the data base
==============================================================
First Name: Anne
Middle Initial: A
Last Name: Smith
Region: 1
Branch: 0
First Name: Mike
Middle Initial: B
Last Name: Jones
Region: 1
Branch: 1
----->Dialog has been reset ,hence reused
First Name: Steve
Middle Initial: C
Last Name: Brown
Region: 2
Branch: 0
First Name: Frank
Middle Initial: D
Last Name: Green
Region: 3
Branch: 1
==============================================================
            Deleting employees from the data base
==============================================================
Deleted employee 0001
Deleted employee 0002
----->Dialog has been reset ,hence reused
Deleted employee 0003
Deleted employee 0004
Exiting from dialogEmployeeInfo....


CLEANING UP

To clean up the demo environment, type:

   make clobber

This shuts down the TS/MP system and removes most of the files created when 
executing the demo. 

                                 *  *  *
 You are granted a limited copyright to modify and use this sample
 code for your internal purposes only. THIS SOFTWARE IS PROVIDED "AS-
 IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE OR NONINFRINGEMENT. IN NO EVENT SHALL THE
 HEWLETT-PACKARD COMPANY OR ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE INCURRED BY YOU OR ANY THIRD PARTY IN CONNECTION WITH THE
 USE OF THIS SOFTWARE.                                                         

