Advanced demo

The demo provided for this API is for reference purposes only and 
is intended to illustrate usage of the new APIs available in the
extensions product.  The demo is not intended to form the basis 
of production programs.  The demo does not demonstrate the 
definitive way to write an application.  There are other methods
that might be more suitable for your requirements or application.

This demo demonstrates the use of ddl2java, the Pathsend API, the
Pathway API, and the Enscribe API.  When you complete the tasks
described in this file, you will have created an application that
accesses an Enscribe order-entry database.

You do this by creating a DDL dictionary, creating the database, 
using ddl2java to generate classes, compiling a java client
(Client1.java) and a java server (RServer.java) both of which use 
the classes generated by ddl2java to communicate with each other 
and to access the database, using a java program to load the 
database, configuring and starting a Pathway system for the Java 
server, and executing the code in the client and the server.

The following diagram shows the files in the order-entry database
and the relationships between the files:

  orders	odetail		parts
!---------!   !---------!     !--------!
!ordernum !-->!ordernum !  |->!partnum !<-|
!....     !   !partnum  !--|  !....    !  | 
!custnum  !<-|!....     !     !--------!  |
!---------!  |!---------!                 |
             |                            |
customer     |  supplier        fromsup   |
!---------!  |!---------!     !--------!  | 
!custnum  !--|!suppnum  !-|   !partnum !--|
!....     !   !         ! |-->!suppnum !  
!         !   !....     !     !...     !
!---------!   !---------!     !--------!

The files that come with this demo are:

genddl - source code to create a DDL dictionary
recfup - source code to create the Enscribe database files
itemlist - an input file to ddl2java which tells it
           what classes to generate.
README - this file
RServer.java - the source code for the java server
Client1.java - the source code for the client program
pconfig - code to configure pathway
servconfig - code to configure the pathway serverclass for
             the java server
spathmon - an obey file that is used to start pathmon.

SETUP
==========================================================
The following are the list of tasks, you must complete to
setup the demo:

1.  Copy the files in this directory to your own directory; for 
    example, you could make your own directory and copy these files
    to that directory by doing:
   
    mkdir /<root>/demo1
    cp -R * /<root>/demo1
   
    where <root> is your home directory.
    
    Note: Later in this document, you will be asked several
    times to supply the name of this directory.
   
2.  cd to the directory you just made:

    cd /<root>/demo1 
    
3.  Select an empty Guardian volume.subvolume.  This subvolume
    should be empty so that you do not delete or purge any
    existing DDL dictionaries or Enscribe files that you 
    already have.
    
    Note: In the rest of this document, you will be asked to
    supply the name of this Guardian volume.subvolume.  
    Sometimes, you will supply the name using Guardian format,
    for example: $data.test.  Sometimes you will be asked to
    supply the name using oss format, for example,/G/data/test
   
4.  Edit the file named genddl.  Change <dictloc> to
    the Guardian $volume.subvolume you chose in step 3. For this
    step, you specify the volume.subvolume in Guardian format.
   
    For example, if your Guardian volume.subvolume is
    $data.test, the first line in genddl should look like:
    ?dict $data.test
   
    
5.  Examine the contents of genddl to see the kinds of Definitions
    and Records that will be created in your new dictionary.
   
6.  Create the DDL dictionary by entering:

    gtacl -p ddl < genddl
   
    When DDL completes its execution, you should see the following:
   
    Objects:     Added    Replaced   Deleted
    Definitions     28           0         0
    Records          6           0         0
    Dictionary on subvol $<vol>.<subvol> is closed.
   
    Errors detected: 34   - this is ok due to delete statements
    Warnings detected: 0 
   
7.  Examine the contents of the itemlist file.  This is the file that
    is input to ddl2java and that tells ddl2java:
   
    a) What kinds of classes to generate: INPUT or OUTPUT.
    b) Which DDL Records or Defintions to use to generate these
      classes.
      
8.  Issue the command to ddl2java to generate the class files:

    ddl2java -i itemlist -dpath /G/<vol>/<subvol> -d test_src -p test_pkg -c
   
    where <vol>/<subvol> is your Guardian volume and subvolume. 
    For this step, you enter the volume.subvolume in oss format.
   
    When you use this command, you tell ddl2java:
   
    a) What to generate: -i itemlist
    b) The location of the DDL dictionary: -dpath /G/<vol>/<subvol>
    c) Where the generated .java files should go: -d test_src
    d) Where the generated .class files should go: -p test_pkg
    e) To compile the generated .java files: -c
    
    The output should appear as:
    
    ddl2java 3.0 (C)2000 Compaq (C)2003 Hewlett-Packard Development Company, L.P
    ddl2java - compiling test_src/I_Orderinforequest.java...
    ddl2java - compiling test_src/O_Orderinforequest.java... 
    ...
   
9.  Edit the file called recfup.  This file will be used
    to create the Enscribe files on the volume and subvolume that
    you specify.  Change <vol>.<subvol> to your Guardian
    volume and subvolume.  For this step, you specify the
    volume.subvolume in Guardian format. For example, to create 
    the files on $data.test, the first line in recfup should 
    look like: volume $data.test
   
10. After you have edited recfup, use the File Utility Program
    (FUP), to create the Enscribe database by entering:
   
    gtacl -p fup < recfup
   
11. Examine the contents of RServer.java. When
    you are through looking at this file, compile it by entering:
  
    javac RServer.java
   
    
12. Edit loadData.java.  Find the line containing, <vol>.<subvol>
    and replace it with your Guardian volume and subvolume (in
    Guardian format).
	
    a) compile loadData.java by entering:
	
	javac loadData.java
		
    b) execute loadData to write data to the newly created files 
       by entering:
    
    	java loadData
    	
       The output should appear as:
       
       >>Wrote all data to the customer file
        
       >>Wrote all data to the orders file
        
       >>Wrote all data to the parts file
        
       >>Wrote all data to the fromsup file
        
       >>Wrote all data to the supplier file
        
       >>Wrote all data to the odetail file
 
    
13. Edit the file called servconfig which will be
    used to configure the pathway serverclass for the java
    server. There are comments in this file that tell you what
    you need to change.  All comments are enclosed in 
    brackets ([]).  You'll have to change the values for:
    
    SET SERVER ENV CLASSPATH
    SET SERVER STDOUT
    SET SERVER STDERR
    SET SERVER VOLUME
    SET SERVER CWD
    
    Optionally, you might need to change the values for:
    
    SET SERVER ENV JREHOME
    SET SERVER PROGRAM
    
14. Select a name for your Pathmon process.  The name must begin
    with a letter of the alphabet and can be no more than 5
    characters long.  
    
15. Edit the file named spathmon.  Change all occurrences
    of <vol>.<subvol> to your Guardian volume and subvolume 
    using Guardian format.  Change <pathmon_name> to the name you 
    selected for your pathmon.  Enter the following command:
	
	gtacl -p edit < spathmon 
	
    After you have done this, enter:
	
	gtacl -c 'obey $<vol>.<subvolume>.spathmon'
	
    where <vol> and <subvolume> are your Guardian volume and
    subvolume in Guardian format.

16. Configure pathway by entering the following command.  Replace
    <name> with the name of your pathmon:
    
    gtacl -p pathcom \$<name> < pconfig
    
17. Configure the java server by entering the following command.
    Replace <name> with the name of your pathmon:
    
    gtacl -p pathcom \$<name> < servconfig
    
18. Edit Client1.java.  Find the line that contains:  

     pmonName = ("$<name>");
     
     and replace <name> with the name of your pathmon.
     
19. Compile Client1.java by typing:

    javac Client1.java
    
================================================================
EXECUTION:
    
Run Client1.  To run Client1 in interactive mode enter:

   java Client1 -i
   
   You will be asked to select from items 1 through 5, make
   your selection and hit return.  Depending on your choice,
   you may be asked to input more data later on.
    
To run Client1 in batch mode, enter:
    
    java Client1
    
When you are finished with the demo, enter the following command
to shutdown the pathway system:

    gtacl -c 'pathcom $<pathmon_name>; shutdown !'
    
=================================================================  
TROUBLE SHOOTING HINTS

PROBLEMS STARTING PATHMON
-----------------------------------------------------------------
The following is a list of possible errors that could occur
when you try to start pathmon:

*ERROR* Process name error: File in use  

You need to change the name of your pathmon because the name
you have chosen is already be used by someone else.

*ERROR* In OBEY file $XXXX.XXXX.SPATHMON:

You didn't make all the required changes to the spathmon file.
This message could be followed by any of the following messages:

   Expecting a legal subvolume name

You either didn't change line 1 in this file or you didn't
specify a valid Guardian volume.subvolume.

   Expecting a legal filename
   
You either didn't change the <vol>.<subvol> in line 2 or 3
or you didn't specify a valid Guardian volume.subvolume.

   Expecting a legal process name
   
You either didn't change <pathmon_name> or you specified
an invalid value for <pathmon_name> which must begin
with a letter of the alphabet and consist of 5 or less
characters.
_________________________________________________________________
PROBLEMS RUNNING THE CLIENT
-----------------------------------------------------------------
If the following error occurs when you type java Client1:
 
An error has occurred in the requester's communication with 
the Pathmon process. TS/MP error 902; File system error 14; 
serverclass name: $<pathmon_name>.mysvc

Your pathway system is not configured correctly. Type:

    gtacl -p pathcom \$<pathmon_name>
    
    The pathcom prompt should appear:
    
    $Z0J5: PATHCOM - T8344<NNN> - (<DATE>)
    COPYRIGHT COMPAQ COMPUTER CORPORATION 1980 - 1985, 1987 - <YEAR>
    = 
    
    Enter:
    
    status server mysvc
    
    If you see an error like the following:
    
    
    SERVER           #RUNNING   ERROR  INFO
    MYSVC                0      1159   1
    
    Refer to the TS/MP System Management Manual for
    information about the error. For example, the particular 
    error shown above indicates that the PROGRAM for the
    server was not set correctly.  After obtaining the 
    information about the error, carefully examine your
    servconfig file to determine if you have made any
    errors in specifying values.  After you have
    corrected any errors, you can reconfigure
    the server by entering:
    
    gtacl -c 'pathcom $<pathmon_name>; delete server mysvc'
    gtacl -p pathcom \$<pathmon_name> < servconfig
    
    NOTE: the first command uses the gtacl -c option so that 
    the $ sign in the pathmon name doesn't have to be
    escaped. Since the second command requires use of
    the -p option, the $ does have to be escaped by using the
    \ symbol.
	
------------------------------------------------------------------
If the client behaves strangely, look at the contents of the files
called rerrlog and routlog in the directory where you installed
the demo. These files will contain informational and error
messages from the server.

                                 *  *  *
 You are granted a limited copyright to modify and use this sample
 code for your internal purposes only. THIS SOFTWARE IS PROVIDED "AS-
 IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE OR NONINFRINGEMENT. IN NO EVENT SHALL THE
 HEWLETT-PACKARD COMPANY OR ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE INCURRED BY YOU OR ANY THIRD PARTY IN CONNECTION WITH THE
 USE OF THIS SOFTWARE.                                                         

