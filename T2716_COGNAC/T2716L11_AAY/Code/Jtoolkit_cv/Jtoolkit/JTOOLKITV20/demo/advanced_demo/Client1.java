// -------------------------------------------------------------------------
//
// You are granted a limited copyright to modify and use this sample
// code for your internal purposes only. THIS SOFTWARE IS PROVIDED "AS-
// IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE OR NONINFRINGEMENT. IN NO EVENT SHALL THE
// HEWLETT-PACKARD COMPANY OR ITS SUBSIDIARIES BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
// OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE INCURRED BY YOU OR ANY THIRD PARTY IN CONNECTION WITH THE
// USE OF THIS SOFTWARE.
//
// -------------------------------------------------------------------------   


/*
 * Demo client which communicates with a java server.
 * This program accepts the following argument: -i
 * If you specify -i, the client prints out a
 * list of options from which you can select the tasks
 * you want the client and server to perform.
 *
 * If you don't specify -i, the client performs
 * all possible tasks: asks the server for information about
 * 10 customers, ask the server for information about order
 * number 1, asks the server to add a new customer, and
 * asks the server to update a record in the parts file
 * to change the number of parts in the inventory.
 */
import test_pkg.*;
import java.io.*;
import java.util.*;
import com.tandem.ext.guardian.*;
import com.tandem.tsmp.*;
import com.tandem.tmf.*;
import com.tandem.util.*;
import com.tandem.ext.util.*;

class Client1 {

	static protected String pmonName;
	static protected String svrClassName;
	static protected Properties properties = null;
	static TsmpServer myserver;
	static Current tx;

	private final static int CUST_INFO_REQ = 1;
	private final static int ORDER_INFO_REQ = 2;
	private final static int ADD_CUSTOMER_REQ = 3;
	private final static int ODETAIL_INFO_REQ = 4;
	private final static int GET_PART_INFO_REQ = 5;
	private final static int UPDATE_PART_INFO_REQ = 6;
	private final static int CUST_INFO_REPLY = 7;
	private final static int ORDER_INFO_REPLY = 8;
	private final static int ADD_CUSTOMER_REPLY = 9;
	private final static int ODETAIL_INFO_REPLY = 10;
	private final static int GET_PART_INFO_REPLY = 11;
	private final static int ERROR_REPLY_CODE = 99;
	private static BufferedReader stdIn = null;
	private static boolean isInteractive = false;
	private static int choice = 0;


	public static void main(String args[]) {

	  if(args.length >= 1) {
		  if(args[0].equals("-i")){
			stdIn = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter a number from the following list:");
			System.out.println("1. Obtain information about 10 customers.");
			System.out.println("2. Obtain information about order number 1.");
			System.out.println("3. Add a new customer.");
			System.out.println("4. Update a parts record.");
			System.out.println("5. Do all of the above.");
			try {
				String fromUser = stdIn.readLine();
				try {
					choice = Integer.parseInt(fromUser);
				} catch (NumberFormatException nf) {
					System.out.println("You did not enter a number from 1 to 5");
					System.exit(0);
				}
			isInteractive = true;
			} catch (IOException io) {
				System.out.println(io.getMessage());
				System.exit(0);
			}
		  } else {
	    	System.out.println("usage: Client1 [-i]");
			System.exit(0);
	      }
	  }

	  String pmonName = null;
	  String svrClassName = null;
	  int i = 0;

	  pmonName = ("$<name>");
	  svrClassName = new String("mysvc");

	  // Create a TsmpServer object supplying the pathmon name and
	  // the serverclass name.
	  myserver = new TsmpServer(pmonName,svrClassName);

	  tx = new Current();

	  switch(choice) {
		 case 1: getCustomerInfo((short)0);
			  break;
		 case 2: getOrderInfo();
			  break;
		 case 3: addCustomer();
			  break;
		 case 4: updatePart();
			  break;
		 default: getCustomerInfo((short)0);
			  	  getOrderInfo();
			  	  addCustomer();
			  	  updatePart();
	 }
	 if(stdIn != null)
	 	try {
	 		stdIn.close();
		} catch (IOException io2) {}
	 System.out.println("Exiting from Client1....");

	}
	/*
	 * This method obtains information about numCust
	 * customers in the customer file.  If numCust equals
	 * 0, then it obtains information about the first 10
	 * customers. It uses classes
	 * generated by ddl2java (O_Customerinforequest and
	 * I_Customerinforeply) to create the request and
	 * to decompose the reply.
	 */

	private static void getCustomerInfo(short numCustomers) {
	  int request_code = CUST_INFO_REQ;
	  int reply_code;
	  if(numCustomers == (short) 0)
	  	System.out.println("Getting Information about 10 Customers");
	  else
	  	System.out.println("Getting Information about all Customers");
	  O_Customerinforequest req = new O_Customerinforequest();
	  I_Customerinforeply rep = new I_Customerinforeply();


	  req.setRequest_code(request_code);
	  req.setStarting_custnum((short)0);
	  if(numCustomers == (short)0)
	  	numCustomers = (short)10;
	  if(numCustomers > 300)
	  	numCustomers = 300;
	  req.setNum_customers_requested(numCustomers);

 	  try {
		doService(req, rep, CUST_INFO_REPLY);
		int numCust = rep.getNum_customers();
		for(int i = 0; i < numCust; i++) {
			System.out.println("======================================");
			System.out.println(rep.getCustnum(i)+"  "+rep.getCustname(i));
			System.out.println(rep.getAddress(i));
			System.out.println(rep.getCity(i));
			System.out.println(rep.getState(i));
			System.out.println(rep.getZip(i));
			System.out.println("======================================");
		}
		System.out.println("Done");
	  } catch (com.tandem.ext.util.DataConversionException dce) {
		System.out.println(dce.getMessage());
		System.exit(1);
	  }
    }
   /*
    * This method returns information about order number 1.  It uses
    * classes (O_Orderinforequest, I_Orderinforeply, O_Orderdetailrequest,
    * and I_Orderdetailreply) generated by ddl2java for the request
    * and the reply.
    */
    private static void getOrderInfo() {
	  int request_code = ORDER_INFO_REQ;
	  int reply_code = 0;
	  Current tx = new Current();

	  O_Orderinforequest req = new O_Orderinforequest();
	  I_Orderinforeply rep = new I_Orderinforeply();
	  O_Orderdetailrequest req2 = new O_Orderdetailrequest();
	  I_Orderdetailreply rep2 = new I_Orderdetailreply();
	  int totalOrderPrice = 0;

	  System.out.println("Getting order info");
	  req.setRequest_code(request_code);
	  req.setOrdernum(1);
	  req.setCustnum(10);

	  try {
		doService(req, rep, ORDER_INFO_REPLY);
		int custnum = rep.getCustnum();
		int ordernum = rep.getOrdernum();
		String custname = rep.getCustname();
		String ordermo = rep.getOrder_date_month();
		ordermo = fixDate(ordermo);
		String orderdy = rep.getOrder_date_day_of_month();
		orderdy = fixDate(orderdy);
		String orderyr = rep.getOrder_date_year();
		orderyr = fixDate(orderyr);
		String delmo = rep.getDel_date_month();
		delmo = fixDate(delmo);
		String deldy = rep.getDel_date_day_of_month();
		deldy = fixDate(deldy);
		String delyr = rep.getDel_date_year();
		delyr = fixDate(delyr);
		System.out.println("=================================================");
		System.out.println("Order for: "+custname);
		System.out.println("Ordernum: "+ordernum);
		System.out.println("Ordered on: "+ordermo+"/"+orderdy+"/"+orderyr);
		System.out.println("Delivery date: "+delmo+"/"+deldy+"/"+delyr);
		System.out.println("------------------------------------------------");
		req2.setOrdernum(rep.getOrdernum());
		req2.setRequest_code(ODETAIL_INFO_REQ);
		doService(req2, rep2,ODETAIL_INFO_REPLY);
		int numItems = rep2.getNumdetails();
		if(numItems > 0)
			System.out.println("PartName            Number Ordered    Price");
		for(int i = 0; i < numItems; i++) {
			String numOrd = rep2.getQuantity_ordered(i);
			String itemPrice = rep2.getItem_price(i);
			int orderLinePrice = ((Integer.parseInt(numOrd)) * Integer.parseInt(removeDecimal(itemPrice)));
			totalOrderPrice += orderLinePrice;
			System.out.println(rep2.getItem_name(i)+numOrd+"                 $"+itemPrice);
		}
		System.out.println("------------------------------------------------");
		System.out.println("Total amount of order: $"+putDecimal(String.valueOf(totalOrderPrice)));
		System.out.println("=================================================");
	  } catch (com.tandem.ext.util.DataConversionException dce) {
		System.out.println(dce.getMessage());
		System.exit(1);
	  }
   }
   /*
    * This method adds a customer to the customer file.
    * It uses O_Add_customer and I_Add_customer_reply which
    * were generated by ddl2java to create the request and
    * to decompose the reply.
    */
   private static void addCustomer() {
 	  int request_code = ADD_CUSTOMER_REQ;
 	  int reply_code = 0;
 	  String custname = null;
 	  String address = null;
 	  String city = null;
 	  String state = null;
 	  String zip = null;

 	  O_Add_customer req = new O_Add_customer();
 	  I_Add_customer_reply rep = new I_Add_customer_reply();

	  // Giving getCustomerInfo a large number because the
	  // server will stop reading customers when it hits
	  // end of file.
	  if(isInteractive)
 	  	getCustomerInfo((short)300);

	  System.out.println("Adding a new customer");
 	  req.setRequest_code(request_code);
 	  if(isInteractive) {
		try{
		  System.out.println("Enter a customer name(> 30 characters):");
		  custname = stdIn.readLine();
		  System.out.println("custname = "+custname);
		  System.out.println("Enter an address(> 22 characters):");
		  address = stdIn.readLine();
		  System.out.println("address is "+address);
		  System.out.println("Enter a city(> 14 characters):");
		  city = stdIn.readLine();
		  System.out.println("Enter a state code (2 characters):");
		  state = stdIn.readLine();
		  System.out.println("Enter a zipcode(5 characters):");
		  zip = stdIn.readLine();
		} catch (IOException io) {
			System.out.println(io.getMessage());
			System.exit(0);
		}
      } else {
		  custname = new String("BRAND NEW CUSTOMER");
		  address = new String("184 Spruce Street");
		  city = new String("Oxnard");
		  state = new String("CA");
		  zip = new String("93030");
  	  }
 	  req.setCustname(custname);
 	  req.setAddress(address);
	  req.setCity(city);
	  req.setState(state);
	  req.setZip(zip);

  	  try {
		doService(req, rep, ADD_CUSTOMER_REPLY);
		System.out.println("Customer: "+rep.getNewcustnum()+" added");
   	 } catch (com.tandem.ext.util.DataConversionException de) {
 		System.out.println(de.getMessage());
 		System.exit(1);
 	 }
 	 if(isInteractive)
 	 	getCustomerInfo((short)300);
   }
 /*
    * This method updates an existing parts record.
    * It uses O_Add_customer and I_Add_customer_reply which
    * were generated by ddl2java to create the request and
    * to decompose the reply.
    */
   private static void updatePart() {
 	  int request_code = UPDATE_PART_INFO_REQ;
 	  int reply_code = 0;
 	  int partnum = 0;
 	  String partno = null;
 	  String inventory = "+1";

 	  O_Updatepartinfo req = new O_Updatepartinfo();
 	  I_Getpartinforeply rep = new I_Getpartinforeply();

	  System.out.println("Updating a part");
 	  req.setRequest_code(request_code);
 	  if(isInteractive) {
		try{
		  System.out.println("Enter the number of a part (1,2,3,4,5,6,7,8,9,10:)");
		  partno = stdIn.readLine();
		  partnum = Integer.parseInt(partno);
		  if(partnum < 0 || partnum > 10) {
			  System.out.println("The value you enter for partnum must be between 1 and 10");
			  System.exit(0);
		  }
		 } catch (IOException io) {
			System.out.println(io.getMessage());
			System.exit(0);
		 } catch (NumberFormatException nfe) {
			System.out.println("You didn't enter a number");
			System.exit(0);
		 }
      } else {
		  partnum = 1;
  	  }
  	  req.setPartnum(partnum);
 	  req.setChange_inventory(inventory);

  	  try {
		System.out.println("Calling get part info");
		doService(req, rep, GET_PART_INFO_REPLY);
		System.out.println("========================================");
		System.out.println("Updated parts record:");
		System.out.println("Part number: "+rep.getPartnum());
		System.out.println("Part name:   "+rep.getPartname());
		System.out.println("Inventory:   "+rep.getInventory());
		System.out.println("Location:    "+rep.getLocation());
		System.out.println("Price:       $"+rep.getPrice());
		System.out.println("========================================");
   	 } catch (com.tandem.ext.util.DataConversionException de) {
 		System.out.println(de.getMessage());
 		System.exit(1);
 	 }
   }
   /*
    * This method begins a transaction and calls the service method of
    * the TsmpServer. When the reply is received, this method
    * verifies that the reply code is the one expected. If it is
    * this method commits the transaction; if it is not, this
    * method rollsback the transaction.
    */

    private static byte [] doService(GuardianOutput req, GuardianInput rep,
 	  int expectedReplyCode) throws DataConversionException {
	  I_Error_reply erep = new I_Error_reply();
	  byte [] repbytes = new byte[3000];
	  int reply_code = 0;

	  try {
	    		 // Begin a transaction
	  	 tx.begin();
	  	 myserver.service(req, repbytes);
	  	 reply_code =  DataConversion.BIN32ToJavaInt(repbytes,0);
	  	 if(reply_code == expectedReplyCode) {
	  	 	tx.commit(true);
	  	 	rep.unmarshal(repbytes,rep.getLength());
	  	 } else {
	  	 	tx.rollback();
	  	 	erep.unmarshal(repbytes,erep.getLength());
			System.out.println("ERROR occurred: "+erep.getMsg().trim());
			System.out.println("ERROR NUMBER: "+erep.getError_number());
		 }
	   } catch (TsmpServerException e) {
	  	 System.out.println(e.getMessage());
	  	 try {
	  		// rollback because of errors
	  	    tx.rollback();
	  	 } catch (FSException er) {}
	  		System.exit(1);
	  } catch (TsmpFileSystemException e) {
          System.out.println(e.getMessage());
          try {
                 // rollback because of errors
             tx.rollback();
          } catch (FSException er) {}
                 System.exit(1);
   }

	   catch (FSException fs) {
	  		System.out.println(fs.getMessage());
	  		try {
	  			// rollback
	  		   tx.rollback();
	  	     } catch (FSException er2) {}
	  		   System.exit(1);
	  } catch (com.tandem.ext.util.DataConversionException de) {
	  	System.out.println(de.getMessage());
	  	System.exit(1);
	  }
	  return repbytes;
    }
    /*
     * Formats a date for printing
     */
    private static String fixDate(String str) {
  	  if(str.length() == 1) {
  		 String newS = new String("0"+str);
  		 return newS;
  	  }
  	  return str;
    }
    /*
     * Formats a String containing an integer value for printing
     */
    private static String putDecimal(String str) {
	  StringBuffer newStr = new StringBuffer(21);

	  newStr.append(str.substring(0,str.length() - 2));
	  newStr.append(".");
	  newStr.append(str.substring(str.length() - 2, str.length()));
	  return newStr.toString();
    }
    /*
     * Removes a decimal from a String containing numeric
     * data.
     */
    private static String removeDecimal(String str) {
	  int i = 0;
	  StringBuffer newStr = new StringBuffer(18);

	  i = str.indexOf(".");
	  newStr.append(str.substring(0, i ));
	  newStr.append(str.substring(i + 1, str.length()));
	  return newStr.toString();
   }

}

