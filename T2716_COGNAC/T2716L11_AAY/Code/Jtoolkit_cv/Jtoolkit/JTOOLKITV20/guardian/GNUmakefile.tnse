#
# Makefile for com.tandem.ext.guardian and
#              com.tandem.ext.util packages
#
# (cross-compiler version)
# 

# Include file that defines location of compiler, java, pthreads etc.
include ../Defs.gmk.tnse

##
## CLASSPATH
##
export CLASSPATH
CLASSPATH=.\;./classes\;$(JAVA_HOME)/jre/lib/rt.jar

# Create relinkable library file rather than archive file
# Strip symbols for non-debug builds
INCLUDE_DIRS = -I./$(STUBS) -I$(JNI_OSS_INCL)/include -I$(JNI_OSS_INCL)/include/oss \
	-I$(CSRC) -I$(PTHREADS_DIR)


##
## Source and target directories
## 
JAVASRC=src_java
CSRC=src_c
ifeq ($(ARCH_DATA_MODEL), 100)
CSRC=src_spt_c
endif
CLASSBIN=classes
STUBS=stubs
OBJ=obj
OBJ64=obj64
OBJ_SPT=obj_spt
#Used for debug builds
SUFFIX= _g

##
## Package Name
##
LIB = guardian
PKGPATH = com/tandem/ext
SUBDIRS = util guardian

##
## Package Source Files 
##

# Add Java source files here
FILES.java = \
	$(JAVASRC)/$(PKGPATH)/util/DataConversion.java \
	$(JAVASRC)/$(PKGPATH)/util/DataConversionException.java \
	$(JAVASRC)/$(PKGPATH)/util/PathsendModeType.java \
	$(JAVASRC)/$(PKGPATH)/util/NativeLoader.java \
	$(JAVASRC)/$(PKGPATH)/guardian/GuardianInput.java \
	$(JAVASRC)/$(PKGPATH)/guardian/GuardianOutput.java \
	$(JAVASRC)/$(PKGPATH)/guardian/GError.java \
	$(JAVASRC)/$(PKGPATH)/guardian/GuardianException.java \
	$(JAVASRC)/$(PKGPATH)/guardian/GuardianWarning.java \
	$(JAVASRC)/$(PKGPATH)/guardian/ProcessHandle.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgCancel.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgCpuDown.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgCpuUp.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgOpen.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgClose.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgNodeDown.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgNodeUp.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgRemoteCpuDown.java \
	$(JAVASRC)/$(PKGPATH)/guardian/SysMsgRemoteCpuUp.java \
	$(JAVASRC)/$(PKGPATH)/guardian/ReceiveInfo.java \
	$(JAVASRC)/$(PKGPATH)/guardian/ReceiveNoOpeners.java \
	$(JAVASRC)/$(PKGPATH)/guardian/Receive.java 

# Add C files to this list
FILES.c = \
	$(CSRC)/util/DataConversion.c \
	$(CSRC)/guardian/tmrqst.c \
	$(CSRC)/guardian/ProcessHandle.c \
	$(CSRC)/guardian/Receive.c \
	$(CSRC)/guardian/ReceiveInfo.c 

# List of object files for optimized build
FILES.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)$(SUFFIX)/$(TNSE_DIR)/%.o)


# List of 64 bit object files for optimized build
FILES64.o = $(FILES.c:$(CSRC)/%.c=$(OBJ64)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD64.o = $(FILES.c:$(CSRC)/%.c=$(OBJ64)$(SUFFIX)/$(TNSE_DIR)/%.o)

# List of SPT object files for optimized build
FILES_SPT.o = $(FILES.c:$(CSRC)/%.c=$(OBJ_SPT)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD_SPT.o = $(FILES.c:$(CSRC)/%.c=$(OBJ_SPT)$(SUFFIX)/$(TNSE_DIR)/%.o)

FILES.class = $(FILES.java:$(JAVASRC)/%.java=$(CLASSBIN)/%.class)
FILES.class.compile = $(subst /,.,$(FILES.class:$(CLASSBIN)/%.class=%))

##
## Rules
##

# 'all' makes the jar file, regenerates the jni header files and makes the optimized
# and non-optimized library files.  Building javadoc files is not part of this rule.
# Javadoc files are built for the customer using the top-level makefile but developers
# that just want to check that they didn't break javadoc can run "gmake javadoc"
# using this makefile
ifeq ($(ARCH_DATA_MODEL), 64)
all: $(LIB).jar .stubs  $(OBJ64) $(FILES64.o) $(OBJ64)$(SUFFIX) $(FILESD64.o)
endif
ifeq ($(ARCH_DATA_MODEL), 32)
all: $(LIB).jar .stubs $(OBJ) $(FILES.o) $(OBJ)$(SUFFIX) $(FILESD.o) 
endif
ifeq ($(ARCH_DATA_MODEL), 100)
all: $(LIB).jar .stubs $(OBJ_SPT) $(FILES_SPT.o) $(OBJ_SPT)$(SUFFIX) $(FILESD_SPT.o) 
endif

javadoc : .doc $(FILES.java) $(LIB).jar
	$(JAVADOC) -d doc -use -serialwarn \
	-linkoffline http://download.oracle.com/javase/1.4.2/docs/api . \
	-classpath ./$(LIB).jar:$(CLASSPATH)  \
	-sourcepath ./src_java \
	-protected -windowtitle "NonStop(TM) Server for Java(TM) Extensions" \
	com.tandem.ext.guardian com.tandem.ext.util 

clean :
	rm -rf .class* .stubs 
	rm -rf .doc doc $(LIB).jar
	rm -rf $(CLASSBIN) $(OBJ) $(OBJ)$(SUFFIX) $(OBJ64) $(OBJ64)$(SUFFIX) $(OBJ_SPT) $(OBJ_SPT)$(SUFFIX) $(STUBS)

## ------------------------------------------------------
## --- Should be no need to modify from this point on ---
## ------------------------------------------------------
##
##
## Rules for building package bytecode
## 

.delete.classlist:
	@/bin/rm -f .classes.list

.compile.classlist:
	if [ -s .classes.list ] ; \
	then $(JAVAC)  -d $(CLASSBIN) \
	    $(JAVACFLAGS)  \
	    $(shell if [ -s .classes.list ] ; then cat .classes.list; fi ) ; \
	fi

$(CLASSBIN):
	@-mkdir -p $@

$(CLASSBIN)/%.class : $(JAVASRC)/%.java
	@echo $? >>.classes.list

# What purpose does the hidden directory .classes serve? 
.classes: $(CLASSBIN) .delete.classlist $(FILES.class) .compile.classlist
	@touch .classes

$(LIB).jar: $(CLASSBIN) .classes
	rm -f $(LIB).jar; \
	cd $(CLASSBIN); \
	$(JAR) cmv0f ../man.txt ../$@ *; \
	cd ..; \

# Create the doc directory for the javadoc build step
.doc:
	@-mkdir -p doc

##
## Rules for building native stubs (JNI style)
## 
## - This will build the *.h (jni) stub files.
##
# What purpose does the hidden directory .stubs serve?  There used to be a hidden
# directory called .native which I got rid of (do I need it?).
.stubs: $(FILES.class)
	$(JAVAH) -classpath $(CLASSBIN) -jni -d $(STUBS) \
	$(FILES.class.compile)
	@touch .stubs

##
## Rules for building native library
##
## - Compile your own native implementation with IEEE floating point support  

$(OBJ):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done

$(OBJ)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done

$(OBJ)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c 
	$(CC) $(CC_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 

$(OBJ)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c 
	$(CC) $(CC_DEBUG_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 
	
	
##
## Rules for building 64 bit library  
##

$(OBJ64):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done

$(OBJ64)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done
	
$(OBJ64)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) $(U64_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 
	
$(OBJ64)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) $(U64_FLAGS) -WIEEE_float  $(INCLUDE_DIRS) \
	-c -o $@ $< 

	
##
## Rules for building SPT library  
##

$(OBJ_SPT):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done

$(OBJ_SPT)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	@for i in $(SUBDIRS) ; do \
	   echo "making $@/$(TNSE_DIR)/$$i" ; \
	   mkdir -p $@/$(TNSE_DIR)/$$i ; \
	done
	
$(OBJ_SPT)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 
	
$(OBJ_SPT)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) -WIEEE_float  $(INCLUDE_DIRS) \
	-c -o $@ $<
