#-------------------------------------------------------------------------------
## To use this gmake makefile 
## - edit the Defs.gmk file
## - edit the Specification-Version and Implementation-Version in the man.txt file 
## then execute one or more of the following:
##
## gmake [all] - build all subdirectories and SIP tools, creates one .lib and one .jar
##               for all subdirs and generates javadoc 
##
## gmake ARCH_DATA_MODEL=64- build all guardian,enscribe,tsmp and ipc modules and create a 64 bit compatible library
##
## gmake ARCH_DATA_MODEL=100- build all the guardian, enscribe, tsmp and ipc modules and create a 32 bit SPT compatible library
##
## gmake external_install - creates release tree structure and copies the released
##                          files into the release tree
##
## gmake tar - creates tar file of the product, this file can be installed
##             on a system for testing purposes before we're ready to submit to
##             prodrlse_tnse
##   
## gmake prodrlse_tnse - makes tar files of the html doc, obj files, src and everything
##                  else we submit to prodrlse_tnse
## gmake [complete] - performs complete  CM build 
##-------------------------------------------------------------------------------

# Edit this include file to give it correct vproc and compiler etc.
include Defs.gmk.tnse

RELEASE_DIR = release_tnse/javaexth11

DEMODIRS = $(RELEASE_DIR)/demo/advanced_demo $(RELEASE_DIR)/demo/enscribe $(RELEASE_DIR)/demo/pathsend $(RELEASE_DIR)/demo/sip

#List of subdirectories that build executables
PROGRAM_SUBDIRS = ddl2java siptools


# List of subdirectories that build java APIs
# Build guardian before enscribe because enscribe depends on guardian
JAVAAPI_SUBDIRS = guardian enscribe tsmp ipc

# List of JNI libraries for both debug and optimized builds
# These libs all get linked into one library for customer installation
JNI_LIBS = enscribe/obj/$(TNSE_DIR)/*.o guardian/obj/$(TNSE_DIR)/*/*.o tsmp/obj/$(TNSE_DIR)/*.o ipc/obj/$(TNSE_DIR)/*.o

JNI_LIBS_G = enscribe/obj_g/$(TNSE_DIR)/*.o guardian/obj_g/$(TNSE_DIR)/*/*.o tsmp/obj_g/$(TNSE_DIR)/*.o ipc/obj_g/$(TNSE_DIR)/*.o



# List of 64 bit JNI libraries for both debug and optimized builds
# These libs all get linked into one library for customer installation
JNI_LIBS64 = enscribe/obj64/$(TNSE_DIR)/*.o guardian/obj64/$(TNSE_DIR)/*/*.o tsmp/obj64/$(TNSE_DIR)/*.o ipc/obj64/$(TNSE_DIR)/*.o

JNI_LIBS64_G = enscribe/obj64_g/$(TNSE_DIR)/*.o guardian/obj64_g/$(TNSE_DIR)/*/*.o tsmp/obj64_g/$(TNSE_DIR)/*.o ipc/obj64_g/$(TNSE_DIR)/*.o


# List of java packages, used to generated javadoc generated HTML documentation
PACKAGES = com.tandem.ext.enscribe com.tandem.ext.guardian com.tandem.ext.util com.tandem.tsmp com.hp.nonstop.io.process

# This needs to change if subdirectories are added to JAVAAPI_SUBDIRS
# It is used in the JAVADOC command to find class references
CLASSPATH = .:./guardian/classes:./enscribe/classes:./tsmp/classes:./ipc/classes:$(JAVA_HOME)/jre/lib/rt.jar





## ------------------------------------------------
## Shouldn't need to edit anything below this line
## ------------------------------------------------
ifeq ($(ARCH_DATA_MODEL), 64)
all :: create_dir  lib_subdirs tdmext.jar  libtdmext_64.so libtdmext_64_g.so javadoc
endif   
ifeq ($(ARCH_DATA_MODEL), 32)
all :: create_dir exe_subdirs lib_subdirs tdmext.jar libtdmext_32.so libtdmext_32_g.so  javadoc 
endif

package :  external_install tar prodrlse_tnse

create_dir:
	mkdir -p $(TNSE_DIR)

exe_subdirs:
	# Create the executables
	@for i in $(PROGRAM_SUBDIRS) ; do \
	   echo ">>> Making "$$i" all..."; \
	   cd $$i; $(MAKE) -f GNUmakefile.tnse all || exit 1; cd ..; \
	   echo "<<< Finished making "$$i" all." ; \
	done

lib_subdirs:
	# Compile the Java classes and JNI code
	@for i in $(JAVAAPI_SUBDIRS) ; do \
	   echo ">>> Making "$$i" all..."; \
	   cd $$i; $(MAKE) -f GNUmakefile.tnse all || exit 1; cd ..; \
	   echo "<<< Finished making "$$i" all." ; \
	done

clean:
	@for i in $(PROGRAM_SUBDIRS) ; do \
	   echo ">>> Making "$$i" "$@"..."; \
	   cd $$i; $(MAKE) -f GNUmakefile.tnse $@ || exit 1; cd ..; \
	   echo "<<< Finished making "$$i" "$@"." ; \
	done
	@for i in $(JAVAAPI_SUBDIRS) ; do \
	   echo ">>> Making "$$i" "$@"..."; \
	   cd $$i; $(MAKE) -f GNUmakefile.tnse $@ || exit 1; cd ..; \
	   echo "<<< Finished making "$$i" "$@"." ; \
	done
	-rm -rf $(TNSE_DIR)
	-rm -Rf htmldoc
	-rm -Rf release_tnse
	-rm -rf prodrlse_tnse

vproc.o : create_dir 
	-rm $(TNSE_DIR)/vproc.o
	$(CC) $(CC_FLAGS) $(CC_FLAGS_IEEE) $(INCLUDE_DIRS) -c -o $(TNSE_DIR)/$@ vproc.c
vproc_spt.o : create_dir 
	-rm $(TNSE_DIR)/vproc_spt.o
	$(CC) $(CC_FLAGS) $(CC_FLAGS_IEEE) $(INCLUDE_DIRS) -c -o $(TNSE_DIR)/$@ vproc.c
vproc64.o : create_dir 
	-rm $(TNSE_DIR)/vproc64.o
	$(CC) $(CC_FLAGS) $(CC_FLAGS_IEEE) $(INCLUDE_DIRS) $(U64_FLAGS) -c -o $(TNSE_DIR)/$@ vproc.c



vproc_only: vproc.o
	# Do this step if only want to update the VPROC info
	cd ddl2java; $(MAKE) -f GNUmakefile.tnse vproc || exit 1; cd ..
	cd siptools; $(MAKE) -f GNUmakefile.tnse vproc || exit 1; cd ..

tdmext.jar: create_dir lib_subdirs
	# Takes all the previously compiled classes and bundles them in one jar file
	rm -f $(TNSE_DIR)/$@
	$(JAR) cmv0f ./man.txt $(TNSE_DIR)/$@
	@for i in $(JAVAAPI_SUBDIRS) ; do \
	   echo ">>> Jar-ing "$$i" classes..."; \
	   cd $$i/classes; $(JAR) uv0f ../../$(TNSE_DIR)/$@ * || exit 1; cd ../..; \
	   echo "<<< Finished Jar-ing "$$i " classes." ; \
	done

libtdmext_32.so: create_dir lib_subdirs vproc.o
	# Takes all previously compiled libraries and bundle them in one lib file
	$(LD) $(LD_SHARED) $(LD_FLAGS_IEEE) $(JNI_LIBS) $(TNSE_DIR)/vproc.o -o $(TNSE_DIR)/$@

libtdmext_32_g.so: create_dir lib_subdirs vproc.o
	# Takes all previously compiled libraries and bundle them in one lib file
	$(LD) $(LD_SHARED) $(JNI_LIBS_G) $(TNSE_DIR)/vproc.o -o $(TNSE_DIR)/$@

libtdmext_64.so: create_dir lib_subdirs vproc64.o
	# Takes all previously compiled libraries and bundle them in one lib file
	$(LD) $(LD64) $(LD_SHARED) $(LD_FLAGS_IEEE) $(JNI_LIBS64) $(TNSE_DIR)/vproc64.o -o $(TNSE_DIR)/$@

libtdmext_64_g.so: create_dir lib_subdirs vproc64.o
	# Takes all previously compiled libraries and bundle them in one lib file
	$(LD) $(LD64) $(LD_SHARED) $(JNI_LIBS64_G) $(TNSE_DIR)/vproc64.o -o $(TNSE_DIR)/$@

javadoc: tdmext.jar
	# In order to javadoc multiple packages at once the source needs to be in
	# one tree so we'll copy it there and then delete it afterwards
	rm -Rf src_java
	mkdir src_java
	cp -p -R ./guardian/src_java/* src_java/.
	cp -p -R ./enscribe/src_java/* src_java/.
	cp -p -R ./tsmp/src_java/* src_java/.
	cp -p -R ./ipc/src_java/* src_java/.
	rm src_java/com/hp/nonstop/io/process/StringManager.java
	rm -Rf htmldoc
	mkdir htmldoc
	$(JAVADOC) -d htmldoc -use -serialwarn \
	-overview ./overview.html \
	-linkoffline  http://download.oracle.com/javase/1.4.2/docs/api . \
	-classpath $(TNSE_DIR)/tdmext.jar:$(CLASSPATH) \
	-sourcepath ./src_java \
	-protected -windowtitle "HP JToolkit for NonStop(TM) Servers $(API_VERSION) API Specification" \
	-doctitle "HP JToolkit for NonStop<sup><font size="-2">TM</font></sup> Servers $(API_VERSION) API Specification" \
	-header '<b>HP JToolkit for NonStop Servers</b><br><font size="-1">$(VERSION)</font>' \
	$(PACKAGES)
	#rm -Rf src_java

external_install:
	# Create release tree that eventually gets pax'd up and installed 
	rm -rf release_tnse
	mkdir -p $(RELEASE_DIR)/bin $(RELEASE_DIR)/lib
	mkdir -p $(RELEASE_DIR)/demo
	cp -p $(TNSE_DIR)/libtdmext_32.so $(RELEASE_DIR)/lib
	cp -p $(TNSE_DIR)/libtdmext_64.so $(RELEASE_DIR)/lib 
	cp -p $(TNSE_DIR)/tdmext.jar $(RELEASE_DIR)/lib
	chmod a+rx-w $(RELEASE_DIR)/lib/*.*
        # tar all the demos over and move the tar file to the 
        # release directory to unpax
	tar hcf - demo | (cd $(RELEASE_DIR); tar xf - )
	chmod -R 755 $(RELEASE_DIR)/demo
	@for i in $(DEMODIRS) ; do  \
                ./copyrightREADME.sh $$i "README"; \
	done	
	rm tmp
	chmod 444 $(RELEASE_DIR)/demo/jrequester/README
	# copy the COPYRIGHT, LICENSE, README, HPLogo.gif, index.html
	cp -p doc/COPYRIGHT $(RELEASE_DIR)
	cp -p doc/LICENSE $(RELEASE_DIR)
	cp -p doc/HPLogo.gif $(RELEASE_DIR)
	cp -p doc/index.html $(RELEASE_DIR)
	chmod a+r-wx $(RELEASE_DIR)/COPYRIGHT $(RELEASE_DIR)/LICENSE 
	chmod a+r-wx $(RELEASE_DIR)/HPLogo.gif $(RELEASE_DIR)/index.html
	# copy ddl2java and sip to $(RELEASE_DIR)/bin
	cp -p ./siptools/$(TNSE_DIR)/sipconf $(RELEASE_DIR)/bin
	cp -p ./siptools/$(TNSE_DIR)/sipconfobj $(RELEASE_DIR)/bin
	cp -p ./ddl2java/$(TNSE_DIR)/ddl2java $(RELEASE_DIR)/bin
	chmod a+rx-w $(RELEASE_DIR)/bin/*

tar: T2716.tar

T2716.tar: $(RELEASE_DIR)/bin
	# Create and compress pax file
	rm -f $@
	cd release_tnse;\
	pax -s:./:/usr/tandem/: -wvf ../$(TNSE_DIR)/$@ ./*
	cd ..

prodrlse_tnse:
	-rm -rf prodrlse_tnse
	# Create what's necessary for prodrlse_tnse
	-mkdir -p prodrlse_tnse
	chmod -Rf 777 *
	cp -p ./doc/BUILD ./prodrlse_tnse
	cp -p ./doc/RELEASE ./prodrlse_tnse
	cp -p ./doc/T2716DOC_TNSE ./prodrlse_tnse/T2716DOC
	cp -p ./$(TNSE_DIR)/T2716.tar ./prodrlse_tnse/T2716PAX
	# tar up the src using: tar -cvfXh ...
	tar -hcvf ../T2716SRC ./*
	cp ../T2716SRC ./prodrlse_tnse/T2716SRC 
	-rm ../T2716SRC
	# create pax of debug-able code for support
