README file for NSK HTTP Library
================================

I. Introduction
   ------------

NSK HTTP library is a lightweight HTTP protocol library that lets you develop
Guardian applications with browser-based interfaces.  This product does not
use Compaq Open System Services (OSS). You bind the NSK HTTP library with your
CGI program, so your application runs as a single Guardian executable in any of
the following configuration modes:

        -->  Standalone program
        -->  TCP/IP listner
        -->  Pathway listner
        -->  TCP/IP Pathway listner

NSK HTTP library provides user authentication by displaying a browser dialog
box to request a Guardian user name and password.

NSK HTTP library provides the capability for client applications to access
information from Guardian using the HTTP protocol. NSK HTTP library fully
complies with the HTTP/1.0 and CGI/1.1 standards.

NSK HTTP library consists of single library named libcgia. This library binds
with the application CGI program to act as a server that will translate HTTP
requests from the browser.

Compaq packages NSK HTTP library as three files : the library(libcgia), a
sample application CGI program(exformc), and a CGI header file(cgilibh).

Compaq provides source code for a sample application CGI program which you
compile and link with the library for execution (Refer section The Sample
Application).

II. Writing your CGI application
    ----------------------------

Sample code format for application program:
/*******************************************/
#include "cgilib.h"
int CGI_main (int argc, char *argv[]) /*argv contains application's filepath*/
{
     /* CGI function calls */
}
/*******************************************/

Refer the CGI header file (cgilibh) for a list of all callable functions.

Compiling and linking the application:
-------------------------------------
Compile your application using native mode C in the NSK environment. Include
the CGI header file cgilib.h in your application. Then, link your application
with the NSK HTTP library file libcgia.

1. Compile the application program by using the native mode compiler command:

     nmc /in <application source file>/ <objectname>; nostdfiles, ansistreams,
     nolist

   with the compiler pragmas nostdfiles (suppresses automatic opening of three
   standard files stdin, stdout, stderr) and ansistreams (create odd-
   unstructured disk files with fils code of 180).

2. Link the compiled object with the MiniCGI library using the Native Mode
   Linker command :

     nld -o <appname> -ansistreams -nostdfiles &
     -obey  $system.system.libcobey &
     -l zinetsrl -l zstfnsrl $system.system.crtlmain <objectname> libcgia

III. Running the application
     -----------------------

The application can be controlled either by setting environment variables
or by specifying command line arguments. Command line arguments carry higher
preference than environment variables.

Setting environment variables:
-----------------------------
All environment variables used for MiniCGI are optional. If your application
requires environment variables that contain (underscore) '_' characters, set
them up params from TACL using '^' instead of '_' before starting the
application. Set the following PARAMs to control the application:

  param MINICGI^DEBUG <value>       -  DEBUG mode.
  param MINICGI^PORT <port>         -  Application listens on this port.
  param MINICGI^PATHMON <process>   -  Run in Pathway environment.
  param TCPIP^PROCESS^NAME <process>-  Application uses this TCP/IP process.
  param MINICGI^GENERIC <value>     -  Turns of auto form decoding and runs
                                       application without TCP/IP connectivity.

Command line arguments:
----------------------
The list of command line arguments that can be used are:

Usage: <appname> [options]
         options are:
         [ -p <port>           ]
         [ -r <root_directory> ]
         [ -t <TCP/IP process> ]
         [ -timeout <seconds>  ]
         [ -l <log file>       ]
         [ -e <error log file> ]
         [ -naf                ]
         [ -noa                ]
         [ -homepage [script]  ]
         [ -f [parameter]      ]
         [ -pathmon <process>  ]

 -p <port>
   Application listens on this port. If this option is not used, and
   MINICGI^PORT is set, the environment variable's value is taken as port
   number. Else the default port 80 is assigned. Refer to Tandem Nonstop
   TCP/IP Programming Manual for well known ports which are not supposed
   to be used.

 -r <root directory>
   Set the root for file access (e.g. -r $data.mystuff). Default is default
   volume.subvol at startup time.

 -t <TCP/IP process>
   Specifies the TCP/IP process to use for connection. If option is omitted
   then $ztc0 is used (overidden by param tcpip^process^name define - see
   TCP/IP manuals).

 -timeout <seconds>
   Specifies the number of seconds that a transaction will need to complete
   before the server timesout.

 -l <logfile>
   Enables log messages to be written to the logfile.

 -e <error logfile>
   Specifies the logfile onto which error messages are to be logged. Default
   error logfile is zerrlog. The keyword stdout can be used for log filename or
   error filename to get their output to go to the terminal. If you do this,
   make sure you have given PAUSE at the TACL prompt. Otherwise everything will
   stall.

 -naf
   Turns off the feature that decodes forms input into environment variables.

 -noa
   Turns off Guardian logon requirement.

 -homepage [script]
   Specifies the homepage script that will initially be loaded from server.
   Default is /homepage. The optional parameter is passed to CGI_main as its
   argv[0].

 -f [parameter]
   Process the application from the command prompt. The CGI application is run
   without using TCP/IP connectivity. For example, CGI_printf output goes to
   stdout, not to a browser. This is useful for debugging web applications.
   The optional parameter is passed to CGI_main as its argv[0]. If this
   parameter is not specified, the application's name is passed.

 -pathmon <process>
   Run under the named PATHMON process and route requests to server-class
   sc-port defined in Pathway configuration file. The port is specifed by the
   -p option and should match the configuration of the server class sc-port.
   If this option is not used and MINICGI^PATHMON is set, then environment
   variable's value will be taken as PATHMON process.

Configuration modes:
-------------------
The application can be started in any one of the following configuration modes:

(i)  Application Listner mode

   1. Start the application with the following command:
          TACL > run <appname> /nowait/ -p <port>

(ii) TCP/IP listner mode

   1. Prepare port configuration file for listner as given below:
          <port> $vol.subvol.<appname> <command line options>
      Sample port configuration file(portconf) contents:
          8080 $prog.app.exform -noa
   2. Now start the listner process as given below:
          TACL> listner /cpu 0, name $list, nowait/ portconf
      Application will now be started when the browser connects to <port>.

(iii) Pathway server mode

   1. Create PATHMON environment by using Pathway configuration file. The
      entries in the configuration file that are specific to the application
      are:
        - The server volume/subvolume should be same as where the application
          resides as given below:
          SET SERVER VOLUME <$vol>.<subvol>
          SET SERVER DEFINE =_DEFAULTS, CLASS DEFAULTS, VOLUME $<vol>.<subvol>
        - The server startup parameter should contain the following entry:
          SET SERVER STARTUP "-P 0 -R $<vol>.<subvol> -noa"
        - The server program should refer to the application name
          SET SERVER PROGRAM $<vol>.<subvol>.<appname>
        - The server sc-port should mention the port where the application will
          listen for client requests
          ADD SERVER SC-PORT-<port>

      For information about configuring the PATHMON environment, refer to the
      NonStop TS/MP System Management Manual. A Sample PATHMON configuration
      file is given below:

         SET PATHWAY MAXASSIGNS 5
         SET PATHWAY MAXDEFINES 100
         SET PATHWAY MAXEXTERNALTCPS 5
         SET PATHWAY MAXLINKMONS 16
         SET PATHWAY MAXPARAMS 200
         SET PATHWAY MAXPATHCOMS 5
         SET PATHWAY MAXPROGRAMS 0
         SET PATHWAY MAXSERVERCLASSES 50
         SET PATHWAY MAXSERVERPROCESSES 200
         SET PATHWAY MAXSPI 5
         SET PATHWAY MAXSTARTUPS 50
         SET PATHWAY MAXTCPS 5
         SET PATHWAY MAXTELLQUEUE 0
         SET PATHWAY MAXTELLS 0
         SET PATHWAY MAXTERMS 0
         SET PATHWAY MAXTMFRESTARTS 0
         SET PATHWAY SECURITY "G"
         START PATHWAY COLD!
         SET SERVER CREATEDELAY 0 SECS
         SET SERVER DEBUG OFF
         SET SERVER DELETEDELAY 30 MINS
         SET SERVER HIGHPIN ON
         SET SERVER PRI 170
         SET SERVER MAXLINKS 1
         SET SERVER LINKDEPTH 1
         SET SERVER TMF ON
         SET SERVER VOLUME $prog.app
         SET SERVER DEFINE =_DEFAULTS, CLASS DEFAULTS, VOLUME $prog.app
         SET SERVER STARTUP "-P 0 -R $prog.app -noa"
         SET SERVER PROGRAM $prog.app.exform
         SET SERVER AUTORESTART 600
         SET SERVER MAXSERVERS 10
         SET SERVER NUMSTATIC 0
         ADD SERVER SC-PORT-8090

   2. Now start the Pathway environment with the configuration file by giving
      the commands:
       TACL>  PATHMON /NAME $<pathmon process>, CPU 1, OUT <pathway logfile>,
              NOWAIT/
       TACL>  PATHCOM /IN <configuration file>/ $<pathmon process>
   3. Now start the application in the Pathway environment with the same port
      specified in Pathway configuration file by giving the command:
        TACL> run <appname> /nowait, name $mysr/ -p <server sc-port> -pathmon
              <process>
        (e.g.) TACL> run exform /nowait/ -p 8090 -pathmon $pmon

(iv) TCP/IP listner mode in Pathway environment

    1. Create Pathway environment using a Pathway configuration.
    2. Now start the application in the Pathway environment with the same port
       specified in Pathway configuration file and connect through the server
       sc-port from browser.
    3. Prepare port configuration file for listner with '-pathmon' option as
       given below
       <port> $vol.subvol.<appname> -p <server sc-port> -pathmon <process>
       Sample port configuration file(portconf) contents:
          8080 $prog.app.exform -p 8090 -pathmon  $pmon
       The server sc-port should be same the port as specified in Pathway
       configuration file.
    4. Start the listner process by giving the following command:
         TACL> listner /cpu 0, name $list, nowait/ portconf
       Application will now be started under Pathway environment when the
       browser connects to port specified in port configuration file.

Connecting to the server from a browser:
---------------------------------------
1. From a browser type the URL of the system where the server is running
   with the port as given below:
     http://node.domain.com:8080/

2. If authorization was enabled while starting the server, then the browser
   prompts for the username and password. Type in a valid Guardian username
   and password to login.

3. If you want to logoff from the server, type the following URL:
     http://node.domain.com:8080/?MINICGI_FORCE_LOGOFF=1
   If you are using Internet Explorer, you will be prompted with a Login dialog
   box. Just press Cancel to return to the browser window. If you are using
   Netscape, you will be prompted with "Authorization failed" dialog box asking
   whether to Retry or Cancel. Press Cancel to return to the browser.

4. If you want to enable a specific user to connect to the server type the
   folowing URL:
     http://node.domain.com:8080/?MINICGI_FORCE_LOGON=<groupname>.<username>
   The groupname and username are Guardian specific information of user. Now
   logon with the username as specified in URL.

IV. The Sample application
    ----------------------
    Compiling and linking the sample application
    --------------------------------------------
    The MiniCGI library comes with the sample application exformc, which you
    compile and link with the library to form an executable program, as follows

    TACL> nmc /in exformc/ exformo; nostdfiles, ansistreams, nolist
    TACL> nld -o <appname> -ansistreams -nostdfiles &
          obey  $system.system.libcobey -lzinetsrl -lzstfnsrl &
          $system.system.crtlmain exformo libcgia

    Executing the Application
    -------------------------
    1. Logon to the NonStop Himalaya system.
    2. Start the application from the TACL prompt
       TACL> run exform /nowait/ -p 8080
    3. Open a browser and type the following URL.
           http://node.domain.com:8080/
    4. The browser prompts for username and password to logon to the Nonstop
       Himalaya system.
    5. Enter a valid username and password, and then press OK.
    6. Fill the form and click on Send Message. The browser then displays the
       output from the server.
