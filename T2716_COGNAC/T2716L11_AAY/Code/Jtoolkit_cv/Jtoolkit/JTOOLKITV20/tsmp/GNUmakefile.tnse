#
# Makefile for com.tandem.tsmp package
# 
# (cross-compiler version)
# 

include ../Defs.gmk.tnse

OTHER_CLASSES = ../guardian/guardian.jar
##
## CLASSPATH
##
export CLASSPATH
CLASSPATH=.\;./classes\;$(OTHER_CLASSES)\;$(JAVA_HOME)/jre/lib/rt.jar

INCLUDE_DIRS = -I./$(STUBS)  -I../guardian/$(STUBS)  -I$(JNI_OSS_INCL)/include -I$(JNI_OSS_INCL)/include/oss \
	-I$(CSRC) -I$(PTHREADS_DIR) -I../guardian/src_c/guardian
	
ifeq ($(ARCH_DATA_MODEL), 100)
INCLUDE_DIRS = -I./$(STUBS)  -I../guardian/$(STUBS)  -I$(JNI_OSS_INCL)/include -I$(JNI_OSS_INCL)/include/oss \
    -I$(CSRC) -I$(PTHREADS_DIR) -I../guardian/src_spt_c/guardian
endif

##
## Source and target directories
## 
JAVASRC=src_java
CSRC=src_c
ifeq ($(ARCH_DATA_MODEL), 100)
CSRC=src_spt_c
endif
CLASSBIN=classes
STUBS=stubs
OBJ=obj
OBJ64=obj64
OBJ_SPT=obj_spt
#Used for debug builds
SUFFIX= _g

##
## Package Name
##
LIB=tsmp
PKGPATH=com/tandem/tsmp
PKGNAME=com.tandem.tsmp

##
## Package Source Files 
##

FILES.java = \
	$(JAVASRC)/$(PKGPATH)/TsmpServerException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpReplyException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpRequestException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpSendException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpServerUnavailableException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpFileSystemException.java \
	$(JAVASRC)/$(PKGPATH)/TsmpRoutUnavailableException.java \
      $(JAVASRC)/$(PKGPATH)/TsmpDialog.java \
	$(JAVASRC)/$(PKGPATH)/TsmpServer.java \
	$(JAVASRC)/$(PKGPATH)/TsmpServerReply.java \
	$(JAVASRC)/$(PKGPATH)/TsmpGenericServerReply.java \
	$(JAVASRC)/$(PKGPATH)/TsmpServerRequest.java \
	$(JAVASRC)/$(PKGPATH)/TsmpDialogWide.java \
	$(JAVASRC)/$(PKGPATH)/TsmpServerWide.java    

FILES.c = \
	$(CSRC)/convert.c \
        $(CSRC)/context.c \
	$(CSRC)/clientRequest.c 

# List of object files for optimized build
FILES.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD.o = $(FILES.c:$(CSRC)/%.c=$(OBJ)$(SUFFIX)/$(TNSE_DIR)/%.o)

# List of 64 bit object files for optimized build
FILES64.o = $(FILES.c:$(CSRC)/%.c=$(OBJ64)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD64.o = $(FILES.c:$(CSRC)/%.c=$(OBJ64)$(SUFFIX)/$(TNSE_DIR)/%.o)

# List of SPT object files for optimized build
FILES_SPT.o = $(FILES.c:$(CSRC)/%.c=$(OBJ_SPT)/$(TNSE_DIR)/%.o)
# List of object files for debug build
FILESD_SPT.o = $(FILES.c:$(CSRC)/%.c=$(OBJ_SPT)$(SUFFIX)/$(TNSE_DIR)/%.o)

FILES.class = $(FILES.java:$(JAVASRC)/%.java=$(CLASSBIN)/%.class)
FILES.class.compile = $(subst /,.,$(FILES.class:$(CLASSBIN)/%.class=%))

##
## Rules
##

# 'all' makes the jar file, regenerates the jni header files and makes the optimized
# and non-optimized library files.  Building javadoc files is not part of this rule.
# Javadoc files are built for the customer using the top-level makefile but developers
# that just want to check that they didn't break javadoc can run "gmake javadoc"
# using this makefile
ifeq ($(ARCH_DATA_MODEL), 64)
all: $(LIB).jar .stubs  $(OBJ64) $(FILES64.o) $(OBJ64)$(SUFFIX) $(FILESD64.o)
endif
ifeq ($(ARCH_DATA_MODEL), 32)
all: $(LIB).jar .stubs $(OBJ) $(FILES.o) $(OBJ)$(SUFFIX) $(FILESD.o) 
endif
ifeq ($(ARCH_DATA_MODEL), 100)
all: $(LIB).jar .stubs $(OBJ_SPT) $(FILES_SPT.o) $(OBJ_SPT)$(SUFFIX) $(FILESD_SPT.o) 
endif

javadoc : .doc $(FILES.java) $(LIB).jar
	$(JAVADOC) -d doc -use -serialwarn \
	-linkoffline http://download.oracle.com/javase/1.4.2/docs/api . \
	-classpath ./$(LIB).jar:$(CLASSPATH)  \
	-sourcepath ./src_java \
	-protected -header "NonStop(TM) Server for Java(TM) Extensions - Pathsend" \
	-windowtitle "NonStop(TM) Server for Java(TM) Extensions" \
	$(PKGNAME)

clean :
	rm -rf .class* .stubs
	rm -rf .doc doc $(LIB).jar
	rm -rf $(CLASSBIN) $(OBJ) $(OBJ)$(SUFFIX) $(OBJ64) $(OBJ64)$(SUFFIX) $(OBJ_SPT) $(OBJ_SPT)$(SUFFIX) $(STUBS)

## ------------------------------------------------------
## --- Should be no need to modify from this point on ---
## ------------------------------------------------------
##
## Rules for building package bytecode
## 

.delete.classlist:
	@/bin/rm -f .classes.list

.compile.classlist:
	if [ -s .classes.list ] ; \
	then $(JAVAC) -d $(CLASSBIN) \
	    $(JAVACFLAGS)  \
	    $(shell if [ -s .classes.list ] ; then cat .classes.list; fi ) ; \
	fi

$(CLASSBIN):
	@-mkdir -p $@

$(CLASSBIN)/%.class : $(JAVASRC)/%.java
	@echo $? >>.classes.list

.classes: $(CLASSBIN) .delete.classlist $(FILES.class) .compile.classlist
	@touch .classes

$(LIB).jar: $(CLASSBIN) .classes
	rm -f $(LIB).jar; \
	cd $(CLASSBIN); \
	$(JAR) cmv0f ../man.txt ../$@ *; \
	cd ..;

.doc:
	@-mkdir -p doc

##
## Rules for building native stubs (JNI style)
## 
## - This will build all *.h (jni) stub files.
##
.stubs: $(FILES.class) 
	echo $(FILES.class)
	$(JAVAH) -classpath $(CLASSBIN) -jni -d $(STUBS) \
	$(FILES.class.compile)
	@touch .stubs

$(STUBS): 
	@-mkdir -p $@

$(OBJ): 
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)

$(OBJ)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)
	
$(OBJ_SPT): 
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)

$(OBJ_SPT)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)

##
## Rules for building native library
##
## - Compile your own native implementation with IEEE floating point support

$(OBJ)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 

$(OBJ)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 
	
	
$(OBJ64): 
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)

$(OBJ64)$(SUFFIX):
	@-mkdir -p $@
	@-mkdir -p $@/$(TNSE_DIR)

##
## Rules for building native library
##
## - Compile your own native implementation with IEEE floating point support

$(OBJ64)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) $(U64_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 

$(OBJ64)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) $(U64_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 

##
## Rules for building native library
##
## - Compile your own native implementation with IEEE floating point support

$(OBJ_SPT)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 

$(OBJ_SPT)$(SUFFIX)/$(TNSE_DIR)/%.o :: $(CSRC)/%.c
	$(CC) $(CC_DEBUG_FLAGS) -WIEEE_float $(INCLUDE_DIRS) \
	-c -o $@ $< 
	